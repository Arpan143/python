元类的原理
~~~~~~~~~~~~~~

- Python 对象（记为 a）的创建过程：

    #. 如果以 `type(a)(*args, **kwargs)` 的方式生成对象。因为这种方式刚好是调用 callable 的方式，所以会调用 `type(type(a))` 中的 `__call__` 方法。
    #. 执行该对象的类型（`type(a)`）的 `__new__` 方法生成对象。
    #. 执行该对象的类型（`type(a)`）的 `__init__` 方法修改对象的 `__dict__` 属性值。

        - 创建类，一定会向 `__init__` 传递 cls, name, bases, namespace, `**kwargs` 参数。所以定义时， `__init__` 需要能够接受 cls, name, bases, namespace, `**kwargs` 参数。
        - 创建不是类的对象时，调用 `__init__` 的方式是自定义的，不必接受 cls, name, bases, namespace, `**kwargs` 参数。

- Python3 中类也是对象。类的创建和对象的创建只有一点不同（这点不同，让我感到别扭，我认为为了概念上统一，应该完全相同）。

    #. 类创建时，首先执行的是元类（metaclass） `__prepare__` 方法。
    #. 类创建时，会读取类的定义，把定义在类中的属性写到 `namespace` 参数中。

- class A(metaclass=MetaClass) 使得 MetaClass 成为被创建类 A 的 type 。

- `__prepare__`, `__new__`, `__init__` 作用和传递的参数：


    以示例代码:

        class A(metaclass=MetaClass, a=1, b=2):
            first = 1

            def a_method(self): print("hello world")

        class B(A):
            ...


    创建 A 类（ `class A(metaclass=MetaClass, a=1, b=2)` 对应的具体操作）的伪代码为：

    .. code-block:: python

        name = "A"
        bases = ()
        kwargs = {"a": 1, "b": 2}

        # __prepare__ 是 **classmethod** ，接收类名，基类（bases）和关键字参数。__prepare__ 返回的 mapping 类型的数据（namespace），作为生成对象的 `__dict__` 。
        namespace = MetaClass.__prepare__(name, bases, **kwargs)

        # 会读取 A 类的定义，把定义在 A 类中的属性（first, a_method）添加到 `namespace` 参数中。

        # __new__ 是以 **staticmethod** 的方式调用的。但是在元类（metaclass）中定义 __new__ 时，用不用 @staticmethod 修饰都可以。我猜可能是以如下伪代码的方式调用的。
        # __new__ 负责生成对象，__new__ 的返回值是生成的对象。
        # __new__ 接收的参数包括，元类（metaclass），生成对象名（name），上一步 `__prepare__` 生成的 namespace，关键字参数。
        call_new = getattr(MetaClass, '__new__')
        cls = call_new(MetaClass, name, bases, namespace, **kwargs)

        # __init__ 负责对上一步生成的对象 cls 做些修改。
        # __init__ 接收的参数是上一步生成的 cls, 类名（name）, namespace 和关键字参数。cls 是 MetaClass 的实例，所以这里的 __init__ 就是定义在 MetaClass 中的 __init__ 方法。
        A = cls.__init__(name, bases, namespace, **kwargs)

    创建 B 类的过程和创建 A 类只有一点不同：

        创建 B 类时， bases = (<class '__main__.Klass'>,)。
        创建 B 类时， name = "B"


    要记住这几个参数，就要记住类的重要属性：

        - name 表示类名，对应创建类的 `__name__` 属性。
        - namespace 对应创建类的 `__dict__` 属性。
        - bases 对应创建类的 `__bases` 和 `__mro__` 属性。

    创建类的过程，就是修改这些属性的过程。



- Python 对象 A ，能做为元类（metaclass） 当且仅当 type(A) 是 type （以 type 为基类）。




下面的代码演示，Python 对象是如何创建的:

.. code-block:: python


    >>> class MetaClass(type):
    ...
    ...     @classmethod
    ...     def __prepare__(metacls, name, bases, **kwargs):
    ...         print("MetaClass prepare")
    ...         return super().__prepare__(name, bases, **kwargs)
    ...
    ...     def __new__(cls, *args, **kwargs):
    ...         print("MetaClass new.")
    ...         return super().__new__(cls, *args, **kwargs)
    ...
    ...     def __init__(self, *args, **kwargs):
    ...         print("MetaClass init")
    ...
    ...     def __call__(self, *args, **kwargs):
    ...         print("MetaClass call")
    ...         return super().__call__(*args, **kwargs)
    >>>
    >>>
    >>> class A(metaclass=MetaClass):
    ...
    ...     @classmethod
    ...     def __prepare__(metacls, name, bases, **kwargs):
    ...         print("A prepare")
    ...         return super().__prepare__(name, bases, **kwargs)
    ...
    ...     def __new__(cls, *args, **kwargs):
    ...         print("A new")
    ...         return super().__new__(cls, *args, **kwargs)
    ...
    ...     def __init__(self, *args, **kwargs):
    ...         print("A init")
    ...
    ...     def __call__(self, *args, **kwargs):
    ...         print("A call")
    >>>
    >>>
    >>> a = A()
    >>> b = A()
    >>> c = A()


下面的代码，演示类定义属性，在 __prepare__ 之后， __new__ 之前被添加到 `namespace` 参数中。使用这段代码时，在每个 return ，first = 1， def a_method(self) 语句之前打断点，用 Pycharm 调试就能清晰地看出执行的先后顺序，调试时注意观察 namespace 参数值。


.. code-block:: python


    class MetaClass(type):

        @classmethod
        def __prepare__(metacls, name, bases):
            return super().__prepare__(name, bases)

        def __new__(mcs, name, bases, namespace, **kwargs):
            pdb.set_trace()
            return super().__new__(name, bases, namespace, **kwargs)

        def __init__(self, name, bases, namespace, **kwargs):
            return super().__init__(name, bases, namespace, **kwargs)


    class A(metaclass=MetaClass):
        first = 1
        second = 2

        def a_method(self):
            print("hello")






元类的例子
~~~~~~~~~~~~


Python 使用 python module 作为单例类（调用模块中函数的方式和调用类方法略有不同，但是已经够用）。这里的代码，更多是在练习 metaclass（元类）的用法。

.. code-block:: python

    >>> import warnings
    >>>
    >>> class Singleton(type):ql
    ...     def __call__(cls, *args, **kwds):
    ...         if getattr(cls, '_instance', None):
    ...             warnings.warn("单例类，所有的实例是同一个实例。")
    ...         else:
    ...             cls._instance = super().__call__(*args, **kwds)
    ...         return cls._instance
    >>>
    >>> class Scheduler(metaclass=Singleton):
    ...     pass
    >>>
    >>> s = Scheduler()
    >>> s1 = Scheduler()
    >>> s2 = Scheduler()
    >>>
    >>> s is s1
    True
    >>> s is s2
    True


下面的单例类实现摘自《Expert Python Programming》 469 页。

.. code-block:: python
    
    >>> import warnings
    >>> class Singleton:
    ...     _instance = None
    ... 
    ...     def __new__(mcs, *args, **kwargs):
    ...         if mcs._instance is None:
    ...             mcs._instance = super().__new__(mcs, *args, **kwargs)
    ...         else:
    ...             warnings.warn("单例类，所有的实例是同一个实例。")
    ... 
    ...         return mcs._instance
    >>> 
    >>> 
    >>> s = Singleton()    
    >>> s1 = Singleton()
    >>> s2 = Singleton()
    >>> 
    >>> s is s1
    True
    >>> s is s2
    True

下面的单例类的实现，摘自《Expert Python Programming》 470 页，实现思路和本节开头的单例类实现思路一样。

.. code-block:: python

    >>> class Singleton(type):
    ...
    ...     _instance = {}
    ...
    ...     def __call__(cls, *args, **kwargs):
    ...         if cls not in cls._instance:
    ...             if cls not in cls._instance:
    ...                 cls._instance[cls] = super().__call__(*args, **kwargs)
    ...
    ...         return cls._instance[cls]
    >>>
    >>>
    >>> class Scheduler(metaclass=Singleton):
    ...     pass
    >>>
    >>>
    >>> s = Scheduler()
    >>> s1 = Scheduler()
    >>> s2 = Scheduler()
    >>>
    >>> s is s1
    True
    >>> s is s2
    True


**Borg** (也称 Monostate) 是实现单例类的另一种思路：

    所有类的实例，实例字典 `__dict__` 都一样，就相当于是在用同一个实例。


.. code-block:: python

    >>> class Borg(object):
    ...     _state = {}
    ...
    ...     def __new__(cls, *args, **kwargs):
    ...         ob = super().__new__(cls, *args, **kwargs)
    ...         ob.__dict__ = cls._state
    ...         return ob
    >>>
    >>> a = Borg()
    >>> b = Borg()
    >>> a.__dict__ == {}
    True
    >>> b.__dict__ == {}
    True
