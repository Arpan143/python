===========
最优线程数
===========

:Author: 王蒙
:Tags: 网络编程，性能调优

:abstract:

    本节讨论，多大的并发能使程序性能最优。

.. contents::

Audience
========

程序开发

Prerequisites
=============

GIL,线程，进程，IO，系统调用


Problem
=======

- 线程数等于CPU 数时，程序性能最优吗？
- 如何确定线程数等于多少时，程序性能最优？
- 如何确认程序是 IO 瓶颈，还是 CPU 瓶颈？
- 如果宿主机当前的IO 资源使用很多，但是 CPU 很少，是否会让一个本来 CPU 瓶颈的程序变成 IO 瓶颈？
- 衡量程序性能时，如何避免同一台机器上其他程序对于当前程序性能的影响？


Solution
========

- 线程数等于CPU 数时，程序性能最优吗？

    不一定，而且一般情况下都不是。

    多线程带来的额外成本是在切换 CPU 控制权时，会切换线程上下文。频繁切换线程上下文，会花一定时间。

    - 如果程序所有的工作都是在进行计算（加减乘除或者逻辑运算）。

        - 那么使用CPU个数的线程，操作系统大致上给每个线程分配一个核心，这样程序的几个线程之间几乎不会切换上下文。
        - 如果分配多于 cpu 数的线程数，那么程序这几个线程之间会切换上下文，切换上下文降低了效率。
        - 如果分配少于 cpu 数的线程数，那么程序相当于少使用了一个 cpu，效率比不上使用 cpu 个数线程的情况。

    - 如果程序所有的工作都是 IO（比如都是网络）。这时候，程序的效率和CPU关系不大（当然也就和宿主机的 CPU 数目关系不大）。影响效率的主要是 IO。

        虽然操作系统为不同的 IO 提供了非常相似的接口。但是性能上，真心没法一概而论。有的IO 使用多线程能提高效率，有的IO 使用多线程反而减低效率。

        硬盘读写： 硬盘读写的瓶颈在移动磁头（磁头移动的时间和磁头移动的距离成正比）seek time。所以应该尽量让磁头少移动。比如顺序地读写一个文件，每次移动一点点效率很高；相反随机读写就会很慢。

            对于同一块硬盘

                - 如果要读写的文件很大（顺序读写文件，没有什么好优化的），那么使用一个线程读写，还是使用多个线程读写，性能上几乎没有差别。

                - 如果要读写很多小文件（极端情况下，相当于是很多次的随机读写），那么使用多线程读写，要比使用单个线程读写快。因为操作系统在把读写请求交给设备驱动时，使用SCAN/Look/SSTF 算法优化了每个读写请求的排序（使得 seek time 尽可能小）。

            现在磁盘一般有多个磁头（比如磁头数为 n），是否同时读n个文件，要比一个一个地写 n 个文件快？我认为不是，不过需要确认下结果。


        socket 读写： socket 读写的时间主要是数据在网络上传输的时间。使用多线程几乎总是能够提高 socket 读写的性能，用异步IO 的方式处理更合适（因为线程 switch context 会花时间， thread 本身会花点资源，而异步IO代价非常小）。

            举个例子，访问网站 A 和 B：

                - 如果是单线程，那么等待时间为访问A 的网络传输时间 + 访问 B 的网络传输时间。
                - 如果是多线程，那么等待时间等于两者的最小者加上线程切换上下文的时间。
                - 如果是异步IO，那么等待时间基本上等于两者的最小者（异步IO 切换CPU 控制权的时间消化，基本上可以忽略不计）。

    - 实际情况下，程序不可能百分百只占用 CPU, 也不可能百分百只占 IO。所以几乎不可能提前估计出线程数设成几时，程序效率最高。最优的线程数，需要靠测试得出（理论分析只是估计个方向）。

        - 从之前的分析可以看出，测也不好测。

            - 因为同一个程序，在不同主机上的最优线程数不同（跟主机的 CPU 配置，IO 配置有关）。

            - 不仅如此，程序求解不同规模的问题，最优线程数也不同（参见算法导论）。

        - 宿主机上其他程序也可能会影响到程序的性能，该如何避免其他程序对该进程的影响？

            如果能保证，你没有测试的时候，宿主机的 CPU 和 IO 是比较低的；那么基本能够排除其他进程对于测试程序性能的影响。

            使用虚拟化的技术，比如 Docker, 可以拿到分配的 CPU， 内存和IO等的配置，基本上相当于是提供了一个独立环境。


- 如何做测试

    - 从上面的讨论看出，性能最优是靠测试测出来的。所以如何做性能测试很重要。

    - 在做性能测试时，需要记录测试机的性能指标（比如CPU 主频，CPU 核心数，网络带宽，磁盘转速等等），需要记录可配置项的指标（比如程序开的线程数，机器数等等）。

    - 需要确保测试环境，程序没有运行之前，测试机基本上是空闲的。

    - 准备测试数据集，自动测试脚本。可能会用到很多做测试的工具。

    - 开测，如实记录各项指标。

    - 选出执行效率最高的配置。使用该配置部署程序。


- 最佳实践

    - 线程数写到配置文件中，方便修改线程数（当然可以给个 default value, 这样如果部署的时候，不想做性能测试，就直接使用 default value）。

    - 采用易于估计性能的方式写程序。比如让任务尽可能的独立（不要有太多的锁，少共享什么数据）；使用任务队列，把任务分配到多台机器上，这样不用考虑资源的相互竞争，程序的性能和机器数量基本上线性的。

    - 只有当有优化性能的需要时，再测试性能。


Reference
=========


- https://blog.csdn.net/xiaofei0859/article/details/51020663
- Is it useful to use multithreading to handle files on a hard drive? https://stackoverflow.com/questions/5858198/is-it-useful-to-use-multithreading-to-handle-files-on-a-hard-drive
- https://superuser.com/questions/365875/can-hard-disks-read-and-write-simultaneously-on-different-tracks-how
