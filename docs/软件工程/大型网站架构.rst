架构一般定义为系统最根本，最难以改变地设计和决定。定义太抽象。我读《大型网站技术架构 核心原理与案例分析》。感觉架构就是为了解决高并发，高负载带来的问题。


大型网站的核心要素
======================


- 性能

  性能有多种指标。常见的性能指标有：
  
    - 吞吐率
    - 并发
    - 响应时间


- 可用性

  可用性，表示网站出问题不能用的时间，占网站服务总时间的比例。业界常用几个9表示可用性的高低。比如4个9， 表示在一年内 99.99% 的时间内网站系统都没有出问题。业界能达到2个9，就相当牛逼了。
  
  有多方面的因素影响着可用性。比如：
  
    - 运维。
      
      网站一般每月，每周都会更新发布。在更新时，需要保证网站可以正常使用。一般用滚动升级的方式(k8s 上有现成的机制支持滚动升级，不是 k8s 系统也可以仿造 k8s 的原理做滚动升级)来完成。
      发布时，还有充分做测试。一般会有预发布状态，预发布状态就是生成集群上的机器，通过更改反向代理配置，开发机 hosts 文件，让开发人员在生成环境上小范围地测试一下，再正式发布。
      持续集成，使用脚本，自动化发布流程，避免人手忙脚乱去发布时出错。
      运维上自动报警等等。
    
    - 代码。
    
      使用 git flow 的模式，每个功能在独立的 feature 分支上开发。上线时，单拉出一个 release 分支，把所有 feature 分支合并到 release 分支上发布。发布后没有问题，把 release 分支合并到 master 。虽然《大型网站技术架构 核心原理与案例分析》中提到了其他代码管理的模式，
      但是我喜欢我刚说的这种。而且够用了。
    
    - 网站大的时候（集群大的时候），一定会有硬件出故障。
    
      为了高可用，一定要有备用机器。比如整个集群。当一台机器不行时，控制中枢（比如反向代理）能识别出这台机器不行了（常常通过心跳来检测）；然后把请求转移给其他还行的机器处理。
      之后，要尽快恢复集群中有问题的服务器。

- 伸缩性

  伸缩性指的是

- 扩展性

- 安全性
